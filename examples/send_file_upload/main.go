package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	sdkwa "github.com/sdkwa/whatsapp-api-client-go"
)

func main() {
	// Create client
	client, err := sdkwa.NewClient(sdkwa.Options{
		APIHost:          getEnv("SDKWA_API_HOST", "https://api.sdkwa.pro"),
		IDInstance:       getEnv("SDKWA_ID_INSTANCE", ""),
		APITokenInstance: getEnv("SDKWA_API_TOKEN", ""),
	})
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}

	ctx := context.Background()

	// Example 1: Send a text file by upload
	fmt.Println("=== Sending Text File by Upload ===")
	textContent := "Hello from SDKWA Go SDK!\nThis is a sample text file.\nSent via file upload! 📄"
	textReader := strings.NewReader(textContent)

	textResponse, err := client.SendFileByUpload(ctx, sdkwa.SendFileByUploadParams{
		ChatID:   "79999999999@c.us", // Replace with actual chat ID
		File:     textReader,
		FileName: "sample.txt",
		Caption:  "Here's a text file created in Go! 📝",
	})
	if err != nil {
		log.Printf("Failed to send text file: %v", err)
	} else {
		fmt.Printf("✅ Text file sent with ID: %s\n", textResponse.IDMessage)
	}

	// Example 2: Send a JSON file by upload
	fmt.Println("\n=== Sending JSON File by Upload ===")
	jsonContent := `{
	"sdk": "SDKWA Go Client",
	"version": "1.0.0",
	"features": [
		"Send messages",
		"Send files",
		"Group management",
		"Webhook handling"
	],
	"timestamp": "2025-07-14T16:30:00Z"
}`
	jsonReader := strings.NewReader(jsonContent)

	jsonResponse, err := client.SendFileByUpload(ctx, sdkwa.SendFileByUploadParams{
		ChatID:          "79999999999@c.us", // Replace with actual chat ID
		File:            jsonReader,
		FileName:        "sdk_info.json",
		Caption:         "SDK information in JSON format! 📊",
		QuotedMessageID: "", // Add message ID to quote if needed
	})
	if err != nil {
		log.Printf("Failed to send JSON file: %v", err)
	} else {
		fmt.Printf("✅ JSON file sent with ID: %s\n", jsonResponse.IDMessage)
	}

	// Example 3: Send a CSV file by upload
	fmt.Println("\n=== Sending CSV File by Upload ===")
	csvContent := `Name,Age,City,Country
John Doe,30,New York,USA
Jane Smith,25,London,UK
Bob Johnson,35,Toronto,Canada
Alice Brown,28,Sydney,Australia`
	csvReader := strings.NewReader(csvContent)

	csvResponse, err := client.SendFileByUpload(ctx, sdkwa.SendFileByUploadParams{
		ChatID:   "79999999999@c.us", // Replace with actual chat ID
		File:     csvReader,
		FileName: "users_data.csv",
		Caption:  "User data in CSV format! 📈",
	})
	if err != nil {
		log.Printf("Failed to send CSV file: %v", err)
	} else {
		fmt.Printf("✅ CSV file sent with ID: %s\n", csvResponse.IDMessage)
	}

	// Example 4: Send an HTML file by upload
	fmt.Println("\n=== Sending HTML File by Upload ===")
	htmlContent := `<!DOCTYPE html>
<html>
<head>
    <title>SDKWA Go SDK</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        h1 { color: #25D366; }
        .feature { background: #f0f0f0; padding: 10px; margin: 10px 0; }
    </style>
</head>
<body>
    <h1>🚀 SDKWA WhatsApp API Go Client</h1>
    <div class="feature">
        <h3>📱 Send Messages</h3>
        <p>Send text messages, files, contacts, and locations</p>
    </div>
    <div class="feature">
        <h3>👥 Group Management</h3>
        <p>Create groups, manage participants, set admins</p>
    </div>
    <div class="feature">
        <h3>🔗 Webhooks</h3>
        <p>Real-time event handling via HTTP and WebSocket</p>
    </div>
    <p><em>Generated by SDKWA Go SDK - ` + fmt.Sprintf("%v", "2025-07-14") + `</em></p>
</body>
</html>`
	htmlReader := strings.NewReader(htmlContent)

	htmlResponse, err := client.SendFileByUpload(ctx, sdkwa.SendFileByUploadParams{
		ChatID:   "79999999999@c.us", // Replace with actual chat ID
		File:     htmlReader,
		FileName: "sdk_info.html",
		Caption:  "SDK information as HTML page! 🌐",
	})
	if err != nil {
		log.Printf("Failed to send HTML file: %v", err)
	} else {
		fmt.Printf("✅ HTML file sent with ID: %s\n", htmlResponse.IDMessage)
	}

	// Example 5: Send a file from disk (if it exists)
	fmt.Println("\n=== Sending File from Disk (if exists) ===")
	
	// Try to send a file from the current directory
	filename := "README.md"
	if file, err := os.Open(filename); err == nil {
		defer file.Close()
		
		fileResponse, err := client.SendFileByUpload(ctx, sdkwa.SendFileByUploadParams{
			ChatID:   "79999999999@c.us", // Replace with actual chat ID
			File:     file,
			FileName: filename,
			Caption:  "Here's the README file from the project! 📖",
		})
		if err != nil {
			log.Printf("Failed to send %s: %v", filename, err)
		} else {
			fmt.Printf("✅ %s sent with ID: %s\n", filename, fileResponse.IDMessage)
		}
	} else {
		fmt.Printf("📄 %s not found, skipping file upload example\n", filename)
		fmt.Println("   To test file upload from disk:")
		fmt.Println("   1. Place a file in the current directory")
		fmt.Println("   2. Update the filename variable")
		fmt.Println("   3. Run this example again")
	}

	fmt.Println("\n=== SendFileByUpload Examples Complete ===")
	fmt.Println("Replace the phone numbers with real values to test.")
	fmt.Println("\nFile Upload Tips:")
	fmt.Println("📁 Use io.Reader interface for any data source")
	fmt.Println("📝 strings.NewReader() for text content")
	fmt.Println("📂 os.Open() for files on disk")
	fmt.Println("🌐 bytes.NewReader() for byte data")
	fmt.Println("💾 Maximum file size: 100MB")
	fmt.Println("🔍 File type detected automatically by extension")
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
